---
export const prerender = false

import JSZip from "jszip";

const author = Astro.url.searchParams.get("author")
const repo = Astro.url.searchParams.get("repo")
const branch = Astro.url.searchParams.get("branch") ?? "main"

if (!author || !branch) {
    return new Response("Not Found", {
        status: 404
    })
}

const zip = await fetch(`https://github.com/${author}/${repo}/archive/refs/heads/${branch}.zip`)

const arrayBuffer = await (await zip.blob()).arrayBuffer()

const filesObj = (await JSZip.loadAsync(arrayBuffer)).files

let files: any = {}

for (let file in filesObj) {
    if (file.substring(file.indexOf("/")+1).includes("/")) console.log(file)
    files[file.substring(file.indexOf("/")+1)] = [...await filesObj[file].async("uint8array")]
}

if (files["code.py"] === undefined && files["main.py"] === undefined && files["neon.py"] === undefined) {
    return new Response("Not Found", {
        status: 404
    })
}

delete files[""]
---

<script define:vars={{files}}>
    console.log(files)

    if (confirm("Are you sure you want to open this repo? All saved files will be deleted.")) {
        const openRequest = window.indexedDB.open("files_db", 1)
        localStorage.setItem("text", "")

        const loadFiles = (db) => {
            db.transaction("files_os", "readwrite").objectStore("files_os").clear().onsuccess = () => {
                const addFile = (name, file) => {
                    return new Promise((resolve, reject) => {
                        if (name === "code.py" || name === "main.py" || name === "neon.py") {
                            localStorage.setItem("text", new TextDecoder().decode(new Uint8Array(file)))
                            resolve()
                        } else {
                            db.transaction("files_os", "readwrite").objectStore("files_os").add({
                                name, content: file.buffer
                            }).onsuccess = resolve
                        }
                    })
                }

                Promise.all(Object.keys(files).map(key => addFile(key, files[key]))).then(() => {
                    window.location.replace("/editor")
                })
            }
        }

        openRequest.onsuccess = () => {
            let db = openRequest.result;

            loadFiles(db)
        }

        openRequest.onupgradeneeded = () => {
            let db = openRequest.result;

            const objectStore = db.createObjectStore("files_os", {
                keyPath: "name",
            })

            objectStore.createIndex("name", "name", {unique: false})
            objectStore.createIndex("content", "content", {unique: false})

            loadFiles(db)
        }
    } else {
        window.location.replace("/editor")
    }

</script>
